{
  "address": "0x3b5bbC9d8243C6661CcadAdE17B68344770c20FD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ROME",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ROME",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getKValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "k_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "name": "markdown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "valuation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x758e9ece075ac475c95b6aec8f5e4ee461d491470dca6b9029c96cc7deb55820",
  "receipt": {
    "to": null,
    "from": "0x7c21291D033E88bd6A22bA8f3D0716bDD47C9F2e",
    "contractAddress": "0x3b5bbC9d8243C6661CcadAdE17B68344770c20FD",
    "transactionIndex": 5,
    "gasUsed": "910847",
    "logsBloom": "0x
    "blockHash": "0x6f954c8b054ff24d953c4c6879ab3a2d917a8aa19e5e1c8ecefc346f06c8d3ae",
    "transactionHash": "0x758e9ece075ac475c95b6aec8f5e4ee461d491470dca6b9029c96cc7deb55820",
    "logs": [],
    "blockNumber": 991391,
    "cumulativeGasUsed": "1482275",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4a436073552044D5f2f49B176853ad3Ad473d9d6"
  ],
  "solcInputHash": "0e7905d63ddc283e66e38686b6133d3b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ROME\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ROME\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getKValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"k_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"markdown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"valuation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BondingCalculator.sol\":\"RomeBondingCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"src/BondingCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\npragma solidity 0.7.5;\\r\\n\\r\\nlibrary FullMath {\\r\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\r\\n        uint256 mm = mulmod(x, y, uint256(-1));\\r\\n        l = x * y;\\r\\n        h = mm - l;\\r\\n        if (mm < l) h -= 1;\\r\\n    }\\r\\n\\r\\n    function fullDiv(\\r\\n        uint256 l,\\r\\n        uint256 h,\\r\\n        uint256 d\\r\\n    ) private pure returns (uint256) {\\r\\n        uint256 pow2 = d & -d;\\r\\n        d /= pow2;\\r\\n        l /= pow2;\\r\\n        l += h * ((-pow2) / pow2 + 1);\\r\\n        uint256 r = 1;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        r *= 2 - d * r;\\r\\n        return l * r;\\r\\n    }\\r\\n\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 d\\r\\n    ) internal pure returns (uint256) {\\r\\n        (uint256 l, uint256 h) = fullMul(x, y);\\r\\n        uint256 mm = mulmod(x, y, d);\\r\\n        if (mm > l) h -= 1;\\r\\n        l -= mm;\\r\\n        require(h < d, 'FullMath::mulDiv: overflow');\\r\\n        return fullDiv(l, h, d);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Babylonian {\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\r\\n        if (x == 0) return 0;\\r\\n\\r\\n        uint256 xx = x;\\r\\n        uint256 r = 1;\\r\\n        if (xx >= 0x100000000000000000000000000000000) {\\r\\n            xx >>= 128;\\r\\n            r <<= 64;\\r\\n        }\\r\\n        if (xx >= 0x10000000000000000) {\\r\\n            xx >>= 64;\\r\\n            r <<= 32;\\r\\n        }\\r\\n        if (xx >= 0x100000000) {\\r\\n            xx >>= 32;\\r\\n            r <<= 16;\\r\\n        }\\r\\n        if (xx >= 0x10000) {\\r\\n            xx >>= 16;\\r\\n            r <<= 8;\\r\\n        }\\r\\n        if (xx >= 0x100) {\\r\\n            xx >>= 8;\\r\\n            r <<= 4;\\r\\n        }\\r\\n        if (xx >= 0x10) {\\r\\n            xx >>= 4;\\r\\n            r <<= 2;\\r\\n        }\\r\\n        if (xx >= 0x8) {\\r\\n            r <<= 1;\\r\\n        }\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1;\\r\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n        uint256 r1 = x / r;\\r\\n        return (r < r1 ? r : r1);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary BitMath {\\r\\n\\r\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\r\\n        require(x > 0, 'BitMath::mostSignificantBit: zero');\\r\\n\\r\\n        if (x >= 0x100000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            r += 128;\\r\\n        }\\r\\n        if (x >= 0x10000000000000000) {\\r\\n            x >>= 64;\\r\\n            r += 64;\\r\\n        }\\r\\n        if (x >= 0x100000000) {\\r\\n            x >>= 32;\\r\\n            r += 32;\\r\\n        }\\r\\n        if (x >= 0x10000) {\\r\\n            x >>= 16;\\r\\n            r += 16;\\r\\n        }\\r\\n        if (x >= 0x100) {\\r\\n            x >>= 8;\\r\\n            r += 8;\\r\\n        }\\r\\n        if (x >= 0x10) {\\r\\n            x >>= 4;\\r\\n            r += 4;\\r\\n        }\\r\\n        if (x >= 0x4) {\\r\\n            x >>= 2;\\r\\n            r += 2;\\r\\n        }\\r\\n        if (x >= 0x2) r += 1;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary FixedPoint {\\r\\n    // range: [0, 2**112 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq112x112 {\\r\\n        uint224 _x;\\r\\n    }\\r\\n\\r\\n    // range: [0, 2**144 - 1]\\r\\n    // resolution: 1 / 2**112\\r\\n    struct uq144x112 {\\r\\n        uint256 _x;\\r\\n    }\\r\\n\\r\\n    uint8 private constant RESOLUTION = 112;\\r\\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\\r\\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\\r\\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\r\\n\\r\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\r\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\r\\n        return uint112(self._x >> RESOLUTION);\\r\\n    }\\r\\n\\r\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\r\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\r\\n        return uint(self._x) / 5192296858534827;\\r\\n    }\\r\\n\\r\\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\r\\n        require(denominator > 0, 'FixedPoint::fraction: division by zero');\\r\\n        if (numerator == 0) return FixedPoint.uq112x112(0);\\r\\n\\r\\n        if (numerator <= uint144(-1)) {\\r\\n            uint256 result = (numerator << RESOLUTION) / denominator;\\r\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        } else {\\r\\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\r\\n            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\\r\\n            return uq112x112(uint224(result));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // square root of a UQ112x112\\r\\n    // lossy between 0/1 and 40 bits\\r\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\r\\n        if (self._x <= uint144(-1)) {\\r\\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\r\\n        }\\r\\n\\r\\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\r\\n        safeShiftBits -= safeShiftBits % 2;\\r\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\r\\n        if (a > 3) {\\r\\n            c = a;\\r\\n            uint b = add( div( a, 2), 1 );\\r\\n            while (b < c) {\\r\\n                c = b;\\r\\n                b = div( add( div( a, b ), b), 2 );\\r\\n            }\\r\\n        } else if (a != 0) {\\r\\n            c = 1;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2ERC20 {\\r\\n    function totalSupply() external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function token0() external view returns ( address );\\r\\n    function token1() external view returns ( address );\\r\\n}\\r\\n\\r\\ninterface IBondingCalculator {\\r\\n  function valuation( address pair_, uint amount_ ) external view returns ( uint _value );\\r\\n}\\r\\n\\r\\ncontract RomeBondingCalculator is IBondingCalculator {\\r\\n\\r\\n    using FixedPoint for *;\\r\\n    using SafeMath for uint;\\r\\n    using SafeMath for uint112;\\r\\n\\r\\n    address public immutable ROME;\\r\\n\\r\\n    constructor( address _ROME ) {\\r\\n        require( _ROME != address(0) );\\r\\n        ROME = _ROME;\\r\\n    }\\r\\n\\r\\n    function getKValue( address _pair ) public view returns( uint k_ ) {\\r\\n        uint token0 = IERC20( IUniswapV2Pair( _pair ).token0() ).decimals();\\r\\n        uint token1 = IERC20( IUniswapV2Pair( _pair ).token1() ).decimals();\\r\\n        uint decimals = token0.add( token1 ).sub( IERC20( _pair ).decimals() );\\r\\n\\r\\n        (uint reserve0, uint reserve1, ) = IUniswapV2Pair( _pair ).getReserves();\\r\\n        k_ = reserve0.mul(reserve1).div( 10 ** decimals );\\r\\n    }\\r\\n\\r\\n    function getTotalValue( address _pair ) public view returns ( uint _value ) {\\r\\n        _value = getKValue( _pair ).sqrrt().mul(2);\\r\\n    }\\r\\n\\r\\n    function valuation( address _pair, uint amount_ ) external view override returns ( uint _value ) {\\r\\n        uint totalValue = getTotalValue( _pair );\\r\\n        uint totalSupply = IUniswapV2Pair( _pair ).totalSupply();\\r\\n\\r\\n        _value = totalValue.mul( FixedPoint.fraction( amount_, totalSupply ).decode112with18() ).div( 1e18 );\\r\\n    }\\r\\n\\r\\n    function markdown( address _pair ) external view returns ( uint ) {\\r\\n        ( uint reserve0, uint reserve1, ) = IUniswapV2Pair( _pair ).getReserves();\\r\\n\\r\\n        uint reserve;\\r\\n        if ( IUniswapV2Pair( _pair ).token0() == ROME ) {\\r\\n            reserve = reserve1;\\r\\n        } else {\\r\\n            reserve = reserve0;\\r\\n        }\\r\\n        return reserve.mul( 2 * ( 10 ** IERC20( ROME ).decimals() ) ).div( getTotalValue( _pair ) );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2561fe427e23ac90abfd1329247ae1e86a37d7a3d1d6554c554b508496812590\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516110193803806110198339818101604052602081101561003357600080fd5b50516001600160a01b03811661004857600080fd5b606081901b6001600160601b0319166080526001600160a01b0316610f956100846000398061025c528061030752806108325250610f956000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063490084ef11610050578063490084ef146100ea578063686375491461011d5780639d95fbd21461015057610067565b806332da80a31461006c5780634249719f146100b1575b600080fd5b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610181565b60408051918252519081900360200190f35b61009f600480360360408110156100c757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103b8565b61009f6004803603602081101561010057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661046d565b61009f6004803603602081101561013357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661080c565b610158610830565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d60608110156101f657600080fd5b508051602091820151604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516dffffffffffffffffffffffffffff938416965092909116935060009273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169390891692630dfe1681926004808301939192829003018186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d60208110156102ce57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614156102f35750806102f6565b50815b6103ad6103028661080c565b6103a77f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561036b57600080fd5b505afa15801561037f573d6000803e3d6000fd5b505050506040513d602081101561039557600080fd5b5051849060ff16600a0a600202610854565b906108ce565b93505050505b919050565b6000806103c48461080c565b905060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561040e57600080fd5b505afa158015610422573d6000803e3d6000fd5b505050506040513d602081101561043857600080fd5b50519050610464670de0b6b3a76400006103a761045d6104588886610910565b610b1f565b8590610854565b95945050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b657600080fd5b505afa1580156104ca573d6000803e3d6000fd5b505050506040513d60208110156104e057600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905160ff909216925060009173ffffffffffffffffffffffffffffffffffffffff86169163d21220a7916004808301926020929190829003018186803b1580156105e657600080fd5b505afa1580156105fa573d6000803e3d6000fd5b505050506040513d602081101561061057600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561067a57600080fd5b505afa15801561068e573d6000803e3d6000fd5b505050506040513d60208110156106a457600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216925060009161075a9173ffffffffffffffffffffffffffffffffffffffff88169163313ce56791600480820192602092909190829003018186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d602081101561074557600080fd5b505160ff166107548585610b4c565b90610bc0565b90506000808673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d60608110156107cf57600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050610801600a84900a6103a78484610854565b979650505050505050565b600061082a600261082461081f8561046d565b610c02565b90610854565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000826108635750600061082a565b8282028284828161087057fe5b04146108c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610f3f6021913960400191505060405180910390fd5b9392505050565b60006108c783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610c6c565b610918610f06565b60008211610971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610f196026913960400191505060405180910390fd5b8261098b575060408051602081019091526000815261082a565b71ffffffffffffffffffffffffffffffffffff8311610a7657600082607085901b816109b357fe5b0490507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610a4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525091505061082a565b6000610a92846e01000000000000000000000000000085610d28565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610a4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091160490565b6000828201838110156108c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006108c783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dd7565b60006003821115610c5e5750806000610c26610c1f8360026108ce565b6001610b4c565b90505b81811015610c5857809150610c51610c4a610c4485846108ce565b83610b4c565b60026108ce565b9050610c29565b506103b3565b81156103b357506001919050565b60008183610d12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cd7578181015183820152602001610cbf565b50505050905090810190601f168015610d045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610d1e57fe5b0495945050505050565b6000806000610d378686610e4b565b9150915060008480610d4557fe5b868809905082811115610d59576001820391505b8083039250848210610dcc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b610801838387610e96565b60008184841115610e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315610cd7578181015183820152602001610cbf565b505050900390565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84860990508385029250828103915082811015610e8e576001820391505b509250929050565b60008181038216808381610ea657fe5b049250808581610eb257fe5b049450808160000381610ec157fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212203b1f7e87d03d7e49c83aa5dca81d3af95c5fdedbb06f0a4e10838a10f78db97b64736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c8063490084ef11610050578063490084ef146100ea578063686375491461011d5780639d95fbd21461015057610067565b806332da80a31461006c5780634249719f146100b1575b600080fd5b61009f6004803603602081101561008257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610181565b60408051918252519081900360200190f35b61009f600480360360408110156100c757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356103b8565b61009f6004803603602081101561010057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661046d565b61009f6004803603602081101561013357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661080c565b610158610830565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b60008060008373ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156101cc57600080fd5b505afa1580156101e0573d6000803e3d6000fd5b505050506040513d60608110156101f657600080fd5b508051602091820151604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516dffffffffffffffffffffffffffff938416965092909116935060009273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169390891692630dfe1681926004808301939192829003018186803b1580156102a457600080fd5b505afa1580156102b8573d6000803e3d6000fd5b505050506040513d60208110156102ce57600080fd5b505173ffffffffffffffffffffffffffffffffffffffff1614156102f35750806102f6565b50815b6103ad6103028661080c565b6103a77f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561036b57600080fd5b505afa15801561037f573d6000803e3d6000fd5b505050506040513d602081101561039557600080fd5b5051849060ff16600a0a600202610854565b906108ce565b93505050505b919050565b6000806103c48461080c565b905060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561040e57600080fd5b505afa158015610422573d6000803e3d6000fd5b505050506040513d602081101561043857600080fd5b50519050610464670de0b6b3a76400006103a761045d6104588886610910565b610b1f565b8590610854565b95945050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156104b657600080fd5b505afa1580156104ca573d6000803e3d6000fd5b505050506040513d60208110156104e057600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d602081101561057457600080fd5b5051604080517fd21220a7000000000000000000000000000000000000000000000000000000008152905160ff909216925060009173ffffffffffffffffffffffffffffffffffffffff86169163d21220a7916004808301926020929190829003018186803b1580156105e657600080fd5b505afa1580156105fa573d6000803e3d6000fd5b505050506040513d602081101561061057600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169163313ce56791600480820192602092909190829003018186803b15801561067a57600080fd5b505afa15801561068e573d6000803e3d6000fd5b505050506040513d60208110156106a457600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff909216925060009161075a9173ffffffffffffffffffffffffffffffffffffffff88169163313ce56791600480820192602092909190829003018186803b15801561071b57600080fd5b505afa15801561072f573d6000803e3d6000fd5b505050506040513d602081101561074557600080fd5b505160ff166107548585610b4c565b90610bc0565b90506000808673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d60608110156107cf57600080fd5b5080516020909101516dffffffffffffffffffffffffffff9182169350169050610801600a84900a6103a78484610854565b979650505050505050565b600061082a600261082461081f8561046d565b610c02565b90610854565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000826108635750600061082a565b8282028284828161087057fe5b04146108c7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180610f3f6021913960400191505060405180910390fd5b9392505050565b60006108c783836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610c6c565b610918610f06565b60008211610971576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610f196026913960400191505060405180910390fd5b8261098b575060408051602081019091526000815261082a565b71ffffffffffffffffffffffffffffffffffff8311610a7657600082607085901b816109b357fe5b0490507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610a4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b6040518060200160405280827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681525091505061082a565b6000610a92846e01000000000000000000000000000085610d28565b90507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115610a4157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015290519081900360640190fd5b516612725dd1d243ab7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091160490565b6000828201838110156108c757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006108c783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610dd7565b60006003821115610c5e5750806000610c26610c1f8360026108ce565b6001610b4c565b90505b81811015610c5857809150610c51610c4a610c4485846108ce565b83610b4c565b60026108ce565b9050610c29565b506103b3565b81156103b357506001919050565b60008183610d12576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610cd7578181015183820152602001610cbf565b50505050905090810190601f168015610d045780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581610d1e57fe5b0495945050505050565b6000806000610d378686610e4b565b9150915060008480610d4557fe5b868809905082811115610d59576001820391505b8083039250848210610dcc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f46756c6c4d6174683a3a6d756c4469763a206f766572666c6f77000000000000604482015290519081900360640190fd5b610801838387610e96565b60008184841115610e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315610cd7578181015183820152602001610cbf565b505050900390565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84860990508385029250828103915082811015610e8e576001820391505b509250929050565b60008181038216808381610ea657fe5b049250808581610eb257fe5b049450808160000381610ec157fe5b60028581038087028203028087028203028087028203028087028203028087028203028087028203029586029003909402930460010193909302939093010292915050565b6040805160208101909152600081529056fe4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206279207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a26469706673582212203b1f7e87d03d7e49c83aa5dca81d3af95c5fdedbb06f0a4e10838a10f78db97b64736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}