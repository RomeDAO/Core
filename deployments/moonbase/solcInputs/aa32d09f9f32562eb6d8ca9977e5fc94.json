{
  "language": "Solidity",
  "sources": {
    "src/types/RomeAccessControlled.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.7.5;\r\n\r\nimport \"../interfaces/IRomeAuthority.sol\";\r\n\r\nabstract contract RomeAccessControlled {\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event AuthorityUpdated(IRomeAuthority indexed authority);\r\n\r\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    IRomeAuthority public authority;\r\n\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(IRomeAuthority _authority) {\r\n        authority = _authority;\r\n        emit AuthorityUpdated(_authority);\r\n    }\r\n    \r\n\r\n    /* ========== MODIFIERS ========== */\r\n    \r\n    modifier onlyGovernor() {\r\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyGuardian() {\r\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyPolicy() {\r\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n\r\n    modifier onlyVault() {\r\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\r\n        _;\r\n    }\r\n    \r\n    /* ========== GOV ONLY ========== */\r\n    \r\n    function setAuthority(IRomeAuthority _newAuthority) external onlyGovernor {\r\n        authority = _newAuthority;\r\n        emit AuthorityUpdated(_newAuthority);\r\n    }\r\n}\r\n"
    },
    "src/interfaces/IRomeAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity >=0.7.5;\r\n\r\ninterface IRomeAuthority {\r\n    /* ========== EVENTS ========== */\r\n    \r\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\r\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \r\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \r\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \r\n\r\n    event GovernorPulled(address indexed from, address indexed to);\r\n    event GuardianPulled(address indexed from, address indexed to);\r\n    event PolicyPulled(address indexed from, address indexed to);\r\n    event VaultPulled(address indexed from, address indexed to);\r\n\r\n    /* ========== VIEW ========== */\r\n    \r\n    function governor() external view returns (address);\r\n    function guardian() external view returns (address);\r\n    function policy() external view returns (address);\r\n    function vault() external view returns (address);\r\n}\r\n"
    },
    "src/RomeAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity >=0.7.5;\r\n\r\nimport \"./interfaces/IRomeAuthority.sol\";\r\n\r\nimport \"./types/RomeAccessControlled.sol\";\r\n\r\ncontract RomeAuthority is IRomeAuthority, RomeAccessControlled {\r\n\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    address public override governor;\r\n\r\n    address public override guardian;\r\n\r\n    address public override policy;\r\n\r\n    address public override vault;\r\n\r\n    address public newGovernor;\r\n\r\n    address public newGuardian;\r\n\r\n    address public newPolicy;\r\n\r\n    address public newVault;\r\n\r\n\r\n    /* ========== Constructor ========== */\r\n\r\n    constructor(\r\n        address _governor,\r\n        address _guardian,\r\n        address _policy,\r\n        address _vault\r\n    ) RomeAccessControlled( IRomeAuthority(address(this)) ) {\r\n        governor = _governor;\r\n        emit GovernorPushed(address(0), governor, true);\r\n        guardian = _guardian;\r\n        emit GuardianPushed(address(0), guardian, true);\r\n        policy = _policy;\r\n        emit PolicyPushed(address(0), policy, true);\r\n        vault = _vault;\r\n        emit VaultPushed(address(0), vault, true);\r\n    }\r\n\r\n\r\n    /* ========== GOV ONLY ========== */\r\n\r\n    function pushGovernor(address _newGovernor, bool _effectiveImmediately) external onlyGovernor {\r\n        if( _effectiveImmediately ) governor = _newGovernor;\r\n        newGovernor = _newGovernor;\r\n        emit GovernorPushed(governor, newGovernor, _effectiveImmediately);\r\n    }\r\n\r\n    function pushGuardian(address _newGuardian, bool _effectiveImmediately) external onlyGovernor {\r\n        if( _effectiveImmediately ) guardian = _newGuardian;\r\n        newGuardian = _newGuardian;\r\n        emit GuardianPushed(guardian, newGuardian, _effectiveImmediately);\r\n    }\r\n\r\n    function pushPolicy(address _newPolicy, bool _effectiveImmediately) external onlyGovernor {\r\n        if( _effectiveImmediately ) policy = _newPolicy;\r\n        newPolicy = _newPolicy;\r\n        emit PolicyPushed(policy, newPolicy, _effectiveImmediately);\r\n    }\r\n\r\n    function pushVault(address _newVault, bool _effectiveImmediately) external onlyGovernor {\r\n        if( _effectiveImmediately ) vault = _newVault;\r\n        newVault = _newVault;\r\n        emit VaultPushed(vault, newVault, _effectiveImmediately);\r\n    }\r\n\r\n\r\n    /* ========== PENDING ROLE ONLY ========== */\r\n\r\n    function pullGovernor() external {\r\n        require(msg.sender == newGovernor, \"!newGovernor\");\r\n        emit GovernorPulled(governor, newGovernor);\r\n        governor = newGovernor;\r\n    }\r\n\r\n    function pullGuardian() external {\r\n        require(msg.sender == newGuardian, \"!newGuard\");\r\n        emit GuardianPulled(guardian, newGuardian);\r\n        guardian = newGuardian;\r\n    }\r\n\r\n    function pullPolicy() external {\r\n        require(msg.sender == newPolicy, \"!newPolicy\");\r\n        emit PolicyPulled(policy, newPolicy);\r\n        policy = newPolicy;\r\n    }\r\n\r\n    function pullVault() external {\r\n        require(msg.sender == newVault, \"!newVault\");\r\n        emit VaultPulled(vault, newVault);\r\n        vault = newVault;\r\n    }\r\n}\r\n"
    },
    "src/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.5;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n     * given `owner`'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}