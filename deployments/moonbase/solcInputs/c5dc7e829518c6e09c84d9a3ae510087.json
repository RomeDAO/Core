{
  "language": "Solidity",
  "sources": {
    "src/mocks/DAI.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.7.5;\n\n\ncontract LibNote {\n  event LogNote(\n    bytes4   indexed  sig,\n    address  indexed  usr,\n    bytes32  indexed  arg1,\n    bytes32  indexed  arg2,\n    bytes             data\n  ) anonymous;\n\n  modifier note {\n    _;\n    // assembly {\n    //     // log an 'anonymous' event with a constant 6 words of calldata\n    //     // and four indexed topics: selector, caller, arg1 and arg2\n    //     let mark := msize()                         // end of memory ensures zero\n    //     mstore(0x40, add(mark, 288))              // update free memory pointer\n    //     mstore(mark, 0x20)                        // bytes type data offset\n    //     mstore(add(mark, 0x20), 224)              // bytes size (padded)\n    //     calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n    //     log4(mark, 288,                           // calldata\n    //          shl(224, shr(224, calldataload(0))), // msg.sig\n    //          caller(),                              // msg.sender\n    //          calldataload(4),                     // arg1\n    //          calldataload(36)                     // arg2\n    //         )\n    // }\n  }\n}\n\ninterface IDAI {\n\n\n    // --- Auth ---\n  function wards() external returns ( uint256 );\n\n  function rely(address guy) external;\n\n  function deny(address guy) external;\n\n    // --- Token ---\n  function transfer(address dst, uint wad) external returns (bool);\n\n  function transferFrom(address src, address dst, uint wad) external returns (bool);\n\n  function mint(address usr, uint wad) external;\n\n  function burn(address usr, uint wad) external;\n\n  function approve(address usr, uint wad) external returns (bool);\n\n    // --- Alias ---\n  function push(address usr, uint wad) external;\n\n  function pull(address usr, uint wad) external;\n\n  function move(address src, address dst, uint wad) external;\n\n    // --- Approve by signature ---\n  function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n}\n\n\ncontract mockDAI is LibNote {\n\n  event Approval(address indexed src, address indexed guy, uint wad);\n  event Transfer(address indexed src, address indexed dst, uint wad);\n\n    // --- Auth ---\n    mapping (address => uint) public wards;\n\n    function rely(address guy) external note auth { wards[guy] = 1; }\n\n    function deny(address guy) external note auth { wards[guy] = 0; }\n\n    modifier auth {\n        require(wards[msg.sender] == 1, \"DAI/not-authorized\");\n        _;\n    }\n\n    // --- ERC20 Data ---\n    string  public constant name     = \"DAI TOKEN\";\n    string  public constant symbol   = \"DAI\";\n    string  public constant version  = \"1\";\n    uint8   public constant decimals = 18;\n    uint256 public totalSupply;\n    uint public dailyDAILimit;\n\n    mapping (address => uint)                      public balanceOf;\n    mapping (address => mapping (address => uint)) private allowances;\n    mapping (address => uint)                      public nonces;\n    mapping (address => uint)                      public lastMintRestart;\n    mapping (address => uint)                      public DAIMintedToday;\n\n    // event Approval(address indexed src, address indexed guy, uint wad);\n    // event Transfer(address indexed src, address indexed dst, uint wad);\n\n    // --- Math ---\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x);\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x);\n    }\n\n    // --- EIP712 niceties ---\n    bytes32 public DOMAIN_SEPARATOR;\n    // bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\");\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\n\n    constructor() {\n        wards[msg.sender] = 1;\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\n            keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\n            keccak256(bytes(name)),\n            keccak256(bytes(version)),\n            address(this)\n        ));\n        dailyDAILimit = 10000000000000000000000;\n    }\n\n    function allowance( address account_, address sender_ ) external view returns ( uint ) {\n      return _allowance( account_, sender_ );\n    }\n\n    function _allowance( address account_, address sender_ ) internal view returns ( uint ) {\n\n      return allowances[account_][sender_];\n    }\n\n    // --- Token ---\n    function transfer(address dst, uint wad) external returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad) public returns (bool) {\n\n\n      require(balanceOf[src] >= wad, \"DAI/insufficient-balance\");\n        if (src != msg.sender && _allowance( src, msg.sender ) != uint(-1)) {\n            require(_allowance( src, msg.sender ) >= wad, \"DAI/insufficient-allowance\");\n            allowances[src][msg.sender] = sub(_allowance( src, msg.sender ), wad);\n        }\n        balanceOf[src] = sub(balanceOf[src], wad);\n        balanceOf[dst] = add(balanceOf[dst], wad);\n        emit Transfer(src, dst, wad);\n        return true;\n    }\n\n    function addAuth(address usr) external auth {\n        wards[usr] = 1;\n    }\n\n    function adjustDailyDAILimit(uint _limit) external auth {\n        dailyDAILimit = _limit;\n    }\n\n    function mint(address usr, uint wad) external {\n\n      if(wards[msg.sender] == 0) {\n        require(add(wad, DAIMintedToday[msg.sender]) <= dailyDAILimit || sub(block.number, lastMintRestart[msg.sender]) >= 6500 && wad <= dailyDAILimit, \"Over daily DAI Limit\");\n        if( sub(block.number, lastMintRestart[msg.sender]) >= 6500 ) {\n            DAIMintedToday[msg.sender] = wad;\n            lastMintRestart[msg.sender] = block.number;\n        } else {\n            DAIMintedToday[msg.sender] = add(DAIMintedToday[msg.sender], wad);\n        }\n      }\n\n      balanceOf[usr] = add(balanceOf[usr], wad);\n\n      totalSupply    = add(totalSupply, wad);\n\n\n      emit Transfer(address(0), usr, wad);\n    }\n\n    function burn(address usr, uint wad) external {\n        require(balanceOf[usr] >= wad, \"DAI/insufficient-balance\");\n        if (usr != msg.sender && _allowance( usr, msg.sender ) != uint(-1)) {\n            require(_allowance( usr, msg.sender ) >= wad, \"DAI/insufficient-allowance\");\n            allowances[usr][msg.sender] = sub(_allowance( usr, msg.sender ), wad);\n        }\n        balanceOf[usr] = sub(balanceOf[usr], wad);\n        totalSupply    = sub(totalSupply, wad);\n        emit Transfer(usr, address(0), wad);\n    }\n\n    function _approve(address usr, uint wad) internal returns (bool) {\n\n      allowances[msg.sender][usr] = wad;\n\n      emit Approval(msg.sender, usr, wad);\n      return true;\n    }\n\n    function approve(address usr_, uint wad_ ) external returns (bool) {\n\n      return _approve( usr_, wad_ ) ;\n    }\n\n    // --- Alias ---\n    function push(address usr, uint wad) external {\n        transferFrom(msg.sender, usr, wad);\n    }\n\n    function pull(address usr, uint wad) external {\n        transferFrom(usr, msg.sender, wad);\n    }\n\n    function move(address src, address dst, uint wad) external {\n        transferFrom(src, dst, wad);\n    }\n\n    // --- Approve by signature ---\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n                    bool allowed, uint8 v, bytes32 r, bytes32 s) external\n    {\n        bytes32 digest =\n            keccak256(abi.encodePacked(\n                \"\\x19\\x01\",\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH,\n                                     holder,\n                                     spender,\n                                     nonce,\n                                     expiry,\n                                     allowed))\n        ));\n\n        require(holder != address(0), \"DAI/invalid-address-0\");\n        require(holder == ecrecover(digest, v, r, s), \"DAI/invalid-permit\");\n        require(expiry == 0 || block.timestamp <= expiry, \"DAI/permit-expired\");\n        require(nonce == nonces[holder]++, \"DAI/invalid-nonce\");\n        uint wad = allowed ? uint(-1) : 0;\n        allowances[holder][spender] = wad;\n        emit Approval(holder, spender, wad);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}