{
  "address": "0x4C788cBCFd2346d3657469f8e8491ce60c3Bdb74",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aROME",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ROME",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_FRAX",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DAO",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WARCHEST",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ClaimAlphaUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "ClaimUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "SaleEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        }
      ],
      "name": "SaleStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FRAX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROME",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WARCHEST",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aROME",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addMultipleWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_numWhitelist",
          "type": "uint256"
        }
      ],
      "name": "addTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAlpha",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAlphaRome",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAlphaUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ended",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserRemainingAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "romeClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "started",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "teamInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numWhitelist",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaisedDAI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRaisedFRAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedTeam",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2f0f8ed4d113c7a64dea314670b6efb5bcbcdf63bdc5b50423f4f878e9f0a80c",
  "receipt": {
    "to": null,
    "from": "0x9Cc0341F2412A9D22CDcd027C6Cc710330c5325e",
    "contractAddress": "0x4C788cBCFd2346d3657469f8e8491ce60c3Bdb74",
    "transactionIndex": 5,
    "gasUsed": "2516389",
    "logsBloom": "0x
    "blockHash": "0x39e625b2c94b14dfe6686c8b4eeaf5e461631cc22eab0e01819a5709a0df2000",
    "transactionHash": "0x2f0f8ed4d113c7a64dea314670b6efb5bcbcdf63bdc5b50423f4f878e9f0a80c",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 1254127,
        "transactionHash": "0x2f0f8ed4d113c7a64dea314670b6efb5bcbcdf63bdc5b50423f4f878e9f0a80c",
        "address": "0x4C788cBCFd2346d3657469f8e8491ce60c3Bdb74",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009cc0341f2412a9d22cdcd027c6cc710330c5325e"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x39e625b2c94b14dfe6686c8b4eeaf5e461631cc22eab0e01819a5709a0df2000"
      }
    ],
    "blockNumber": 1254127,
    "cumulativeGasUsed": "15831799",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x38a8C8bAD7ecbedad222A24Bb60966aB4F93Da8a",
    "0xf61F86C28E5C79df7b175F302E994fD49519BF7c",
    "0x3fbbBB7A19C57A308aC8792123Da00a8f148A25A",
    "0xC2CF6cDf312E3be163764e390080c1Ca42dF5E53",
    "0x5Acb82c51005FDdF64fF9144B377ec1B62bcf121",
    "0x4fE0BFA6b766783b7c94Ac6368466b7cbAEE7D40"
  ],
  "solcInputHash": "754819311443d42bc9924d85cf5bba19",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aROME\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ROME\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_FRAX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DAO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WARCHEST\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ClaimAlphaUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"ClaimUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"SaleEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"SaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FRAX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROME\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WARCHEST\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aROME\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addMultipleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_numWhitelist\",\"type\":\"uint256\"}],\"name\":\"addTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAlpha\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAlphaRome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAlphaUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRemainingAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"romeClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"started\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"teamInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numWhitelist\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedDAI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRaisedFRAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedTeam\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMultipleWhitelist(address[])\":{\"params\":{\"_addresses\":\": dynamic array of addresses to whitelist\"}},\"addTeam(address,uint256)\":{\"params\":{\"_address\":\": address to whitelist\",\"_numWhitelist\":\": number of whitelists for address\"}},\"addWhitelist(address)\":{\"params\":{\"_address\":\": address to whitelist\"}},\"adminWithdraw(address,uint256)\":{\"params\":{\"_amount\":\": amount of token to withdraw\",\"_token\":\": token address to withdraw\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\": amount of DAI to deposit to sale (18 decimals)\"}},\"depositTeam(uint256)\":{\"details\":\"only for team members\",\"params\":{\"_amount\":\": amount of FRAX to deposit to sale (18 decimals)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeTeam(address)\":{\"params\":{\"_address\":\": address to remove from whitelist\"}},\"removeWhitelist(address)\":{\"params\":{\"_address\":\": address to remove from whitelist\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"_amount\":\": amount of aROME to deposit to sale (9 decimals)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMultipleWhitelist(address[])\":{\"notice\":\"adds multiple whitelist to the sale\"},\"addTeam(address,uint256)\":{\"notice\":\"adds a team member from sale\"},\"addWhitelist(address)\":{\"notice\":\"adds a single whitelist to the sale\"},\"adminWithdraw(address,uint256)\":{\"notice\":\"transfer ERC20 token to DAO multisig\"},\"deposit(uint256)\":{\"notice\":\"it deposits DAI for the sale\"},\"depositTeam(uint256)\":{\"notice\":\"it deposits FRAX for the sale\"},\"removeTeam(address)\":{\"notice\":\"removes a team member from sale\"},\"removeWhitelist(address)\":{\"notice\":\"removes a single whitelist from the sale\"},\"withdraw(uint256)\":{\"notice\":\"it deposits aROME to withdraw ROME from the sale\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/presale/DaiPresale.sol\":\"DaiRomePresale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"src/presale/DaiPresale.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.7.5;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IAlphaRome {\\n    function mint(address account_, uint256 amount_) external;\\n}\\n\\ncontract DaiRomePresale is Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct UserInfo {\\n        uint256 amount; // Amount DAI deposited by user\\n        uint256 debt; // total ROME claimed thus aROME debt\\n        bool claimed; // True if a user has claimed ROME\\n    }\\n\\n    struct TeamInfo {\\n        uint256 numWhitelist; // number of whitelists\\n        uint256 amount; // Amout DAI deposited by team\\n        uint256 debt; // total ROME claimed thus aROME debt\\n        bool claimed; // True if a team member has claimed ROME\\n    }\\n\\n    // Tokens to raise (DAI) & (FRAX) and for offer (aROME) which can be swapped for (ROME)\\n    IERC20 public DAI; // for user deposits\\n    IERC20 public FRAX; // for team deposits\\n    IERC20 public aROME;\\n    IERC20 public ROME;\\n\\n    address public DAO; // Multisig treasury to send proceeds to\\n\\n    address public WARCHEST; // Multisig to send team proceeds to\\n\\n    uint256 public price = 20 * 1e18; // 20 DAI per ROME\\n\\n    uint256 public cap = 1500 * 1e18; // 1500 DAI cap per whitelisted user\\n\\n    uint256 public totalRaisedDAI; // total DAI raised by sale\\n    uint256 public totalRaisedFRAX; // total FRAX raised by sale\\n\\n    uint256 public totalDebt; // total aROME and thus ROME owed to users\\n\\n    bool public started; // true when sale is started\\n\\n    bool public ended; // true when sale is ended\\n\\n    bool public claimable; // true when sale is claimable\\n\\n    bool public claimAlpha; // true when aROME is claimable\\n\\n    bool public contractPaused; // circuit breaker\\n\\n    mapping(address => UserInfo) public userInfo;\\n\\n    mapping(address => TeamInfo) public teamInfo;\\n\\n    mapping(address => bool) public whitelisted; // True if user is whitelisted\\n\\n    mapping(address => bool) public whitelistedTeam; // True if team member is whitelisted\\n\\n    mapping(address => uint256) public romeClaimable; // amount of rome claimable by address\\n\\n    event Deposit(address indexed who, uint256 amount);\\n    event Withdraw(address token, address indexed who, uint256 amount);\\n    event Mint(address token, address indexed who, uint256 amount);\\n    event SaleStarted(uint256 block);\\n    event SaleEnded(uint256 block);\\n    event ClaimUnlocked(uint256 block);\\n    event ClaimAlphaUnlocked(uint256 block);\\n    event AdminWithdrawal(address token, uint256 amount);\\n\\n    constructor(\\n        address _aROME,\\n        address _ROME,\\n        address _DAI,\\n        address _FRAX,\\n        address _DAO,\\n        address _WARCHEST\\n    ) {\\n        require( _aROME != address(0) );\\n        aROME = IERC20(_aROME);\\n        require( _ROME != address(0) );\\n        ROME = IERC20(_ROME);\\n        require( _DAI != address(0) );\\n        DAI = IERC20(_DAI);\\n        require( _FRAX != address(0) );\\n        FRAX = IERC20(_FRAX);\\n        require( _DAO != address(0) );\\n        DAO = _DAO;\\n        require( _WARCHEST != address(0) );\\n        WARCHEST = _WARCHEST;\\n    }\\n\\n    //* @notice modifer to check if contract is paused\\n    modifier checkIfPaused() {\\n        require(contractPaused == false, \\\"contract is paused\\\");\\n        _;\\n    }\\n    /**\\n     *  @notice adds a single whitelist to the sale\\n     *  @param _address: address to whitelist\\n     */\\n    function addWhitelist(address _address) external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        whitelisted[_address] = true;\\n    }\\n\\n    /**\\n     *  @notice adds multiple whitelist to the sale\\n     *  @param _addresses: dynamic array of addresses to whitelist\\n     */\\n    function addMultipleWhitelist(address[] calldata _addresses) external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        require(_addresses.length <= 333,\\\"too many addresses\\\");\\n        for (uint256 i = 0; i < _addresses.length; i++) {\\n            whitelisted[_addresses[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     *  @notice removes a single whitelist from the sale\\n     *  @param _address: address to remove from whitelist\\n     */\\n    function removeWhitelist(address _address) external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        whitelisted[_address] = false;\\n    }\\n    /**\\n     *  @notice adds a team member from sale\\n     *  @param _address: address to whitelist\\n     *  @param _numWhitelist: number of whitelists for address\\n     */\\n    function addTeam(address _address, uint256 _numWhitelist) external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        require(_numWhitelist != 0, \\\"cannot set zero whitelists\\\");\\n        whitelistedTeam[_address] = true;\\n        teamInfo[_address].numWhitelist = _numWhitelist;\\n    }\\n\\n    /**\\n     *  @notice removes a team member from sale\\n     *  @param _address: address to remove from whitelist\\n     */\\n    function removeTeam(address _address) external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        whitelistedTeam[_address] = false;\\n        delete teamInfo[_address];\\n    }\\n\\n    // @notice Starts the sale\\n    function start() external onlyOwner {\\n        require(!started, \\\"Sale has already started\\\");\\n        started = true;\\n        emit SaleStarted(block.number);\\n    }\\n\\n    // @notice Ends the sale\\n    function end() external onlyOwner {\\n        require(started, \\\"Sale has not started\\\");\\n        require(!ended, \\\"Sale has already ended\\\");\\n        ended = true;\\n        emit SaleEnded(block.number);\\n    }\\n\\n    // @notice lets users claim ROME\\n    // @dev send sufficient ROME before calling\\n    function claimUnlock() external onlyOwner {\\n        require(ended, \\\"Sale has not ended\\\");\\n        require(!claimable, \\\"Claim has already been unlocked\\\");\\n        require(ROME.balanceOf(address(this)) >= totalDebt, 'not enough ROME in contract');\\n        claimable = true;\\n        emit ClaimUnlocked(block.number);\\n    }\\n\\n\\n    // @notice lets users claim aROME\\n    function claimAlphaUnlock() external onlyOwner {\\n        require(claimable, \\\"Claim has not been unlocked\\\");\\n        require(!claimAlpha, \\\"Claim Alpha has already been unlocked\\\");\\n        claimAlpha = true;\\n        emit ClaimAlphaUnlocked(block.number);\\n    }\\n\\n    // @notice lets owner pause contract\\n    function togglePause() external onlyOwner returns (bool){\\n        contractPaused = !contractPaused;\\n        return contractPaused;\\n    }\\n    /**\\n     *  @notice transfer ERC20 token to DAO multisig\\n     *  @param _token: token address to withdraw\\n     *  @param _amount: amount of token to withdraw\\n     */\\n    function adminWithdraw(address _token, uint256 _amount) external onlyOwner {\\n        IERC20( _token ).safeTransfer( address(msg.sender), _amount );\\n        emit AdminWithdrawal(_token, _amount);\\n    }\\n\\n    /**\\n     *  @notice it deposits DAI for the sale\\n     *  @param _amount: amount of DAI to deposit to sale (18 decimals)\\n     */\\n    function deposit(uint256 _amount) external checkIfPaused {\\n        require(started, 'Sale has not started');\\n        require(!ended, 'Sale has ended');\\n        require(whitelisted[msg.sender] == true, 'msg.sender is not whitelisted user');\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(\\n            cap >= user.amount.add(_amount),\\n            'new amount above user limit'\\n            );\\n\\n        user.amount = user.amount.add(_amount);\\n        totalRaisedDAI = totalRaisedDAI.add(_amount);\\n\\n        uint256 payout = _amount.mul(1e18).div(price).div(1e9); // aROME to mint for _amount\\n\\n        totalDebt = totalDebt.add(payout);\\n\\n        DAI.safeTransferFrom( msg.sender, DAO, _amount );\\n\\n        IAlphaRome( address(aROME) ).mint( msg.sender, payout );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n    /**\\n     *  @notice it deposits FRAX for the sale\\n     *  @param _amount: amount of FRAX to deposit to sale (18 decimals)\\n     *  @dev only for team members\\n     */\\n    function depositTeam(uint256 _amount) external checkIfPaused {\\n        require(started, 'Sale has not started');\\n        require(!ended, 'Sale has ended');\\n        require(whitelistedTeam[msg.sender] == true, 'msg.sender is not whitelisted team');\\n\\n        TeamInfo storage team = teamInfo[msg.sender];\\n\\n        require(\\n            cap.mul(team.numWhitelist) >= team.amount.add(_amount),\\n            'new amount above team limit'\\n            );\\n\\n        team.amount = team.amount.add(_amount);\\n        totalRaisedFRAX = totalRaisedFRAX.add(_amount);\\n\\n        uint256 payout = _amount.mul(1e18).div(price).div(1e9); // ROME debt to claim\\n\\n        totalDebt = totalDebt.add(payout);\\n\\n        FRAX.safeTransferFrom( msg.sender, DAO, _amount );\\n\\n        IAlphaRome( address(aROME) ).mint( WARCHEST, payout );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     *  @notice it deposits aROME to withdraw ROME from the sale\\n     *  @param _amount: amount of aROME to deposit to sale (9 decimals)\\n     */\\n    function withdraw(uint256 _amount) external checkIfPaused {\\n        require(claimable, 'ROME is not yet claimable');\\n        require(_amount > 0, '_amount must be greater than zero');\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        user.debt = user.debt.add(_amount);\\n\\n        totalDebt = totalDebt.sub(_amount);\\n\\n        aROME.safeTransferFrom( msg.sender, address(this), _amount );\\n\\n        ROME.safeTransfer( msg.sender, _amount );\\n\\n        emit Mint(address(aROME), msg.sender, _amount);\\n        emit Withdraw(address(ROME), msg.sender, _amount);\\n    }\\n\\n    // @notice it checks a users DAI allocation remaining\\n    function getUserRemainingAllocation(address _user) external view returns ( uint256 ) {\\n        UserInfo memory user = userInfo[_user];\\n        return cap.sub(user.amount);\\n    }\\n    // @notice it claims aROME back from the sale\\n    function claimAlphaRome() external checkIfPaused {\\n        require(claimAlpha, 'aROME is not yet claimable');\\n\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        require(user.debt > 0, 'msg.sender has not participated');\\n        require(!user.claimed, 'msg.sender has already claimed');\\n\\n        user.claimed = true;\\n\\n        uint256 payout = user.debt;\\n        user.debt = 0;\\n\\n        aROME.safeTransfer( msg.sender, payout );\\n\\n        emit Withdraw(address(aROME),msg.sender, payout);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x983767b2a88bf10e474b5bb5abb379eea82f26953ba7a52fd6b8725c3703f74d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526801158e460913d00000600755685150ae84a8cdf000006008553480156200002b57600080fd5b5060405162002b0c38038062002b0c833981810160405260c08110156200005157600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091600062000082620001e8565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038616620000e057600080fd5b600380546001600160a01b0319166001600160a01b038881169190911790915585166200010c57600080fd5b600480546001600160a01b0319166001600160a01b038781169190911790915584166200013857600080fd5b600180546001600160a01b0319166001600160a01b038681169190911790915583166200016457600080fd5b600280546001600160a01b0319166001600160a01b038581169190911790915582166200019057600080fd5b600580546001600160a01b0319166001600160a01b03848116919091179091558116620001bc57600080fd5b600680546001600160a01b0319166001600160a01b039290921691909117905550620001ec9350505050565b3390565b61291080620001fc6000396000f3fe608060405234801561001057600080fd5b50600436106102c85760003560e01c80639a60fd141161017b578063c4ae3168116100d8578063e93ed2241161008c578063f2fde38b11610071578063f2fde38b14610660578063f80f5dd514610686578063fc7b9c18146106ac576102c8565b8063e93ed22414610650578063efbe1c1c14610658576102c8565b8063d936547e116100bd578063d936547e146105fc578063e0bab4c414610622578063e546d9c41461062a576102c8565b8063c4ae3168146105a6578063cb3119bd146105ae576102c8565b8063b0e4556f1161012f578063b9b09a9a11610114578063b9b09a9a1461055b578063bc92afdf14610581578063be9a65551461059e576102c8565b8063b0e4556f14610536578063b6b55f251461053e576102c8565b8063a035b1fe11610160578063a035b1fe1461051e578063a3a7961914610526578063af38d7571461052e576102c8565b80639a60fd14146104f05780639d95fbd214610516576102c8565b80636e832a83116102295780637e1cfe62116101dd5780638a67456a116101c25780638a67456a146104d85780638da5cb5b146104e057806398fabd3a146104e8576102c8565b80637e1cfe62146104a457806380fbd162146104d0576102c8565b8063729413161161020e57806372941316146104065780637508f5781461047657806378c8cda71461047e576102c8565b80636e832a83146103f6578063715018a6146103fe576102c8565b8063275709a011610280578063355274ea11610265578063355274ea146103ba578063401d4482146103c257806357e5bd60146103ee576102c8565b8063275709a0146103795780632e1a7d4d1461039d576102c8565b80631f2698ab116102b15780631f2698ab1461032f57806320cf1af91461033757806322bb5cf014610341576102c8565b806312fa6feb146102cd5780631959a002146102e9575b600080fd5b6102d56106b4565b604080519115158252519081900360200190f35b61030f600480360360208110156102ff57600080fd5b50356001600160a01b03166106c2565b604080519384526020840192909252151582820152519081900360600190f35b6102d56106e6565b61033f6106ef565b005b6103676004803603602081101561035757600080fd5b50356001600160a01b03166108ea565b60408051918252519081900360200190f35b61038161094f565b604080516001600160a01b039092168252519081900360200190f35b61033f600480360360208110156103b357600080fd5b503561095e565b610367610b50565b61033f600480360360408110156103d857600080fd5b506001600160a01b038135169060200135610b56565b610381610c26565b610367610c35565b61033f610c3b565b61033f6004803603602081101561041c57600080fd5b81019060208101813564010000000081111561043757600080fd5b82018360208201111561044957600080fd5b8035906020019184602083028401116401000000008311171561046b57600080fd5b509092509050610d11565b6102d5610e8f565b61033f6004803603602081101561049457600080fd5b50356001600160a01b0316610e9f565b61033f600480360360408110156104ba57600080fd5b506001600160a01b038135169060200135610f8c565b61033f6110db565b6102d5611352565b610381611363565b610381611372565b6102d56004803603602081101561050657600080fd5b50356001600160a01b0316611381565b610381611396565b6103676113a5565b61033f6113ab565b6102d5611528565b610381611537565b61033f6004803603602081101561055457600080fd5b5035611546565b6103676004803603602081101561057157600080fd5b50356001600160a01b0316611857565b61033f6004803603602081101561059757600080fd5b5035611869565b61033f611b3a565b6102d5611c48565b6105d4600480360360208110156105c457600080fd5b50356001600160a01b0316611d05565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102d56004803603602081101561061257600080fd5b50356001600160a01b0316611d2f565b610381611d44565b61033f6004803603602081101561064057600080fd5b50356001600160a01b0316611d53565b610367611e6b565b61033f611e71565b61033f6004803603602081101561067657600080fd5b50356001600160a01b0316611ffa565b61033f6004803603602081101561069c57600080fd5b50356001600160a01b0316612126565b610367612216565b600c54610100900460ff1681565b600d6020526000908152604090208054600182015460029092015490919060ff1683565b600c5460ff1681565b600c54640100000000900460ff161561074f576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c546301000000900460ff166107ad576040805162461bcd60e51b815260206004820152601a60248201527f61524f4d45206973206e6f742079657420636c61696d61626c65000000000000604482015290519081900360640190fd5b336000908152600d602052604090206001810154610812576040805162461bcd60e51b815260206004820152601f60248201527f6d73672e73656e64657220686173206e6f742070617274696369706174656400604482015290519081900360640190fd5b600281015460ff161561086c576040805162461bcd60e51b815260206004820152601e60248201527f6d73672e73656e6465722068617320616c726561647920636c61696d65640000604482015290519081900360640190fd5b60028101805460ff1916600190811790915581018054600090915560035461089e906001600160a01b0316338361221c565b600354604080516001600160a01b03909216825260208201839052805133927f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92908290030190a25050565b60006108f4612796565b506001600160a01b0382166000908152600d60209081526040918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526008546109489161229c565b9392505050565b6006546001600160a01b031681565b600c54640100000000900460ff16156109be576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5462010000900460ff16610a1b576040805162461bcd60e51b815260206004820152601960248201527f524f4d45206973206e6f742079657420636c61696d61626c6500000000000000604482015290519081900360640190fd5b60008111610a5a5760405162461bcd60e51b81526004018080602001828103825260218152602001806128ba6021913960400191505060405180910390fd5b336000908152600d602052604090206001810154610a7890836122fe565b6001820155600b54610a8a908361229c565b600b55600354610aa5906001600160a01b0316333085612358565b600454610abc906001600160a01b0316338461221c565b600354604080516001600160a01b03909216825260208201849052805133927fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f892908290030190a2600454604080516001600160a01b03909216825260208201849052805133927f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92908290030190a25050565b60085481565b610b5e6123e6565b6001600160a01b0316610b6f611363565b6001600160a01b031614610bca576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610bde6001600160a01b038316338361221c565b604080516001600160a01b03841681526020810183905281517f1f29bc8239df330207e019f41493b485f9c7d3ce83a795ae64603dde527ada2e929181900390910190a15050565b6003546001600160a01b031681565b600a5481565b610c436123e6565b6001600160a01b0316610c54611363565b6001600160a01b031614610caf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610d196123e6565b6001600160a01b0316610d2a611363565b6001600160a01b031614610d85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615610ddd576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b61014d811115610e34576040805162461bcd60e51b815260206004820152601260248201527f746f6f206d616e79206164647265737365730000000000000000000000000000604482015290519081900360640190fd5b60005b81811015610e8a576001600f6000858585818110610e5157fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610e37565b505050565b600c546301000000900460ff1681565b610ea76123e6565b6001600160a01b0316610eb8611363565b6001600160a01b031614610f13576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615610f6b576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152600f60205260409020805460ff19169055565b610f946123e6565b6001600160a01b0316610fa5611363565b6001600160a01b031614611000576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611058576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b806110aa576040805162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420736574207a65726f2077686974656c69737473000000000000604482015290519081900360640190fd5b6001600160a01b039091166000908152601060209081526040808320805460ff19166001179055600e909152902055565b6110e36123e6565b6001600160a01b03166110f4611363565b6001600160a01b03161461114f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c54610100900460ff166111ab576040805162461bcd60e51b815260206004820152601260248201527f53616c6520686173206e6f7420656e6465640000000000000000000000000000604482015290519081900360640190fd5b600c5462010000900460ff1615611209576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d2068617320616c7265616479206265656e20756e6c6f636b656400604482015290519081900360640190fd5b600b5460048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561127157600080fd5b505afa158015611285573d6000803e3d6000fd5b505050506040513d602081101561129b57600080fd5b505110156112f0576040805162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f75676820524f4d4520696e20636f6e74726163740000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790556040805143815290517fd82fec69986a6bab8d7dde08040401c0345e390a2191c089336066db65b8c36a9181900360200190a1565b600c54640100000000900460ff1681565b6000546001600160a01b031690565b6005546001600160a01b031681565b60106020526000908152604090205460ff1681565b6004546001600160a01b031681565b60075481565b6113b36123e6565b6001600160a01b03166113c4611363565b6001600160a01b03161461141f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5462010000900460ff1661147c576040805162461bcd60e51b815260206004820152601b60248201527f436c61696d20686173206e6f74206265656e20756e6c6f636b65640000000000604482015290519081900360640190fd5b600c546301000000900460ff16156114c55760405162461bcd60e51b815260040180806020018281038252602581526020018061286b6025913960400191505060405180910390fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663010000001790556040805143815290517f70b3a8c1366544927f55edfba677c796d54a050cc77801d11f3c7501756a7cdf9181900360200190a1565b600c5462010000900460ff1681565b6002546001600160a01b031681565b600c54640100000000900460ff16156115a6576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5460ff166115fd576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff161561165a576040805162461bcd60e51b815260206004820152600e60248201527f53616c652068617320656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600f602052604090205460ff1615156001146116ad5760405162461bcd60e51b81526004018080602001828103825260228152602001806128496022913960400191505060405180910390fd5b336000908152600d6020526040902080546116c890836122fe565b600854101561171e576040805162461bcd60e51b815260206004820152601b60248201527f6e657720616d6f756e742061626f76652075736572206c696d69740000000000604482015290519081900360640190fd5b805461172a90836122fe565b815560095461173990836122fe565b60095560075460009061176690633b9aca0090611760908187670de0b6b3a76400006123ea565b90612443565b600b5490915061177690826122fe565b600b55600554600154611798916001600160a01b039182169133911686612358565b600354604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b50506040805186815290513393507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c92509081900360200190a2505050565b60116020526000908152604090205481565b600c54640100000000900460ff16156118c9576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5460ff16611920576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff161561197d576040805162461bcd60e51b815260206004820152600e60248201527f53616c652068617320656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526010602052604090205460ff1615156001146119d05760405162461bcd60e51b81526004018080602001828103825260228152602001806128066022913960400191505060405180910390fd5b336000908152600e6020526040902060018101546119ee90836122fe565b81546008546119fc916123ea565b1015611a4f576040805162461bcd60e51b815260206004820152601b60248201527f6e657720616d6f756e742061626f7665207465616d206c696d69740000000000604482015290519081900360640190fd5b6001810154611a5e90836122fe565b6001820155600a54611a7090836122fe565b600a55600754600090611a9790633b9aca0090611760908187670de0b6b3a76400006123ea565b600b54909150611aa790826122fe565b600b55600554600254611ac9916001600160a01b039182169133911686612358565b600354600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905191909216916340c10f1991604480830192600092919082900301818387803b15801561180457600080fd5b611b426123e6565b6001600160a01b0316611b53611363565b6001600160a01b031614611bae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611c06576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b600c805460ff191660011790556040805143815290517fa78c547613f6306e7a70d1bd161c18a496cae1eeb8d4f9e58b60d69ad72ddf589181900360200190a1565b6000611c526123e6565b6001600160a01b0316611c63611363565b6001600160a01b031614611cbe576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b50600c805460ff64010000000080830482161581027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff909316929092179283905591041690565b600e6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b600f6020526000908152604090205460ff1681565b6001546001600160a01b031681565b611d5b6123e6565b6001600160a01b0316611d6c611363565b6001600160a01b031614611dc7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611e1f576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152601060209081526040808320805460ff19908116909155600e9092528220828155600181018390556002810192909255600390910180549091169055565b60095481565b611e796123e6565b6001600160a01b0316611e8a611363565b6001600160a01b031614611ee5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff16611f3c576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff1615611f99576040805162461bcd60e51b815260206004820152601660248201527f53616c652068617320616c726561647920656e64656400000000000000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040805143815290517f94bb74a9473ae4063ec1e73dc3e35fd4b5abe9cc1e43ad0db84e5358559ccd5a9181900360200190a1565b6120026123e6565b6001600160a01b0316612013611363565b6001600160a01b03161461206e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166120b35760405162461bcd60e51b81526004018080602001828103825260268152602001806127ba6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61212e6123e6565b6001600160a01b031661213f611363565b6001600160a01b03161461219a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff16156121f2576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152600f60205260409020805460ff19166001179055565b600b5481565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e8a9084906124aa565b6000828211156122f3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082820183811015610948576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526123e09085906124aa565b50505050565b3390565b6000826123f9575060006122f8565b8282028284828161240657fe5b04146109485760405162461bcd60e51b81526004018080602001828103825260218152602001806128286021913960400191505060405180910390fd5b6000808211612499576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816124a257fe5b049392505050565b60606124ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661255b9092919063ffffffff16565b805190915015610e8a5780806020019051602081101561251e57600080fd5b5051610e8a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612890602a913960400191505060405180910390fd5b606061256a8484600085612572565b949350505050565b6060824710156125b35760405162461bcd60e51b81526004018080602001828103825260268152602001806127e06026913960400191505060405180910390fd5b6125bc856126ec565b61260d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061266a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161262d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146126cc576040519150601f19603f3d011682016040523d82523d6000602084013e6126d1565b606091505b50915091506126e18282866126f2565b979650505050505050565b3b151590565b60608315612701575081610948565b8251156127115782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561275b578181015183820152602001612743565b50505050905090810190601f1680156127885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180606001604052806000815260200160008152602001600015158152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c6d73672e73656e646572206973206e6f742077686974656c6973746564207465616d536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f742077686974656c69737465642075736572436c61696d20416c7068612068617320616c7265616479206265656e20756e6c6f636b65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f616d6f756e74206d7573742062652067726561746572207468616e207a65726fa264697066735822122049bc04184fd398df97dfd55b32e845909b7bbe5bff967ef01f2c8aee3834476264736f6c63430007050033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c80639a60fd141161017b578063c4ae3168116100d8578063e93ed2241161008c578063f2fde38b11610071578063f2fde38b14610660578063f80f5dd514610686578063fc7b9c18146106ac576102c8565b8063e93ed22414610650578063efbe1c1c14610658576102c8565b8063d936547e116100bd578063d936547e146105fc578063e0bab4c414610622578063e546d9c41461062a576102c8565b8063c4ae3168146105a6578063cb3119bd146105ae576102c8565b8063b0e4556f1161012f578063b9b09a9a11610114578063b9b09a9a1461055b578063bc92afdf14610581578063be9a65551461059e576102c8565b8063b0e4556f14610536578063b6b55f251461053e576102c8565b8063a035b1fe11610160578063a035b1fe1461051e578063a3a7961914610526578063af38d7571461052e576102c8565b80639a60fd14146104f05780639d95fbd214610516576102c8565b80636e832a83116102295780637e1cfe62116101dd5780638a67456a116101c25780638a67456a146104d85780638da5cb5b146104e057806398fabd3a146104e8576102c8565b80637e1cfe62146104a457806380fbd162146104d0576102c8565b8063729413161161020e57806372941316146104065780637508f5781461047657806378c8cda71461047e576102c8565b80636e832a83146103f6578063715018a6146103fe576102c8565b8063275709a011610280578063355274ea11610265578063355274ea146103ba578063401d4482146103c257806357e5bd60146103ee576102c8565b8063275709a0146103795780632e1a7d4d1461039d576102c8565b80631f2698ab116102b15780631f2698ab1461032f57806320cf1af91461033757806322bb5cf014610341576102c8565b806312fa6feb146102cd5780631959a002146102e9575b600080fd5b6102d56106b4565b604080519115158252519081900360200190f35b61030f600480360360208110156102ff57600080fd5b50356001600160a01b03166106c2565b604080519384526020840192909252151582820152519081900360600190f35b6102d56106e6565b61033f6106ef565b005b6103676004803603602081101561035757600080fd5b50356001600160a01b03166108ea565b60408051918252519081900360200190f35b61038161094f565b604080516001600160a01b039092168252519081900360200190f35b61033f600480360360208110156103b357600080fd5b503561095e565b610367610b50565b61033f600480360360408110156103d857600080fd5b506001600160a01b038135169060200135610b56565b610381610c26565b610367610c35565b61033f610c3b565b61033f6004803603602081101561041c57600080fd5b81019060208101813564010000000081111561043757600080fd5b82018360208201111561044957600080fd5b8035906020019184602083028401116401000000008311171561046b57600080fd5b509092509050610d11565b6102d5610e8f565b61033f6004803603602081101561049457600080fd5b50356001600160a01b0316610e9f565b61033f600480360360408110156104ba57600080fd5b506001600160a01b038135169060200135610f8c565b61033f6110db565b6102d5611352565b610381611363565b610381611372565b6102d56004803603602081101561050657600080fd5b50356001600160a01b0316611381565b610381611396565b6103676113a5565b61033f6113ab565b6102d5611528565b610381611537565b61033f6004803603602081101561055457600080fd5b5035611546565b6103676004803603602081101561057157600080fd5b50356001600160a01b0316611857565b61033f6004803603602081101561059757600080fd5b5035611869565b61033f611b3a565b6102d5611c48565b6105d4600480360360208110156105c457600080fd5b50356001600160a01b0316611d05565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102d56004803603602081101561061257600080fd5b50356001600160a01b0316611d2f565b610381611d44565b61033f6004803603602081101561064057600080fd5b50356001600160a01b0316611d53565b610367611e6b565b61033f611e71565b61033f6004803603602081101561067657600080fd5b50356001600160a01b0316611ffa565b61033f6004803603602081101561069c57600080fd5b50356001600160a01b0316612126565b610367612216565b600c54610100900460ff1681565b600d6020526000908152604090208054600182015460029092015490919060ff1683565b600c5460ff1681565b600c54640100000000900460ff161561074f576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c546301000000900460ff166107ad576040805162461bcd60e51b815260206004820152601a60248201527f61524f4d45206973206e6f742079657420636c61696d61626c65000000000000604482015290519081900360640190fd5b336000908152600d602052604090206001810154610812576040805162461bcd60e51b815260206004820152601f60248201527f6d73672e73656e64657220686173206e6f742070617274696369706174656400604482015290519081900360640190fd5b600281015460ff161561086c576040805162461bcd60e51b815260206004820152601e60248201527f6d73672e73656e6465722068617320616c726561647920636c61696d65640000604482015290519081900360640190fd5b60028101805460ff1916600190811790915581018054600090915560035461089e906001600160a01b0316338361221c565b600354604080516001600160a01b03909216825260208201839052805133927f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92908290030190a25050565b60006108f4612796565b506001600160a01b0382166000908152600d60209081526040918290208251606081018452815480825260018301549382019390935260029091015460ff161515928101929092526008546109489161229c565b9392505050565b6006546001600160a01b031681565b600c54640100000000900460ff16156109be576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5462010000900460ff16610a1b576040805162461bcd60e51b815260206004820152601960248201527f524f4d45206973206e6f742079657420636c61696d61626c6500000000000000604482015290519081900360640190fd5b60008111610a5a5760405162461bcd60e51b81526004018080602001828103825260218152602001806128ba6021913960400191505060405180910390fd5b336000908152600d602052604090206001810154610a7890836122fe565b6001820155600b54610a8a908361229c565b600b55600354610aa5906001600160a01b0316333085612358565b600454610abc906001600160a01b0316338461221c565b600354604080516001600160a01b03909216825260208201849052805133927fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f892908290030190a2600454604080516001600160a01b03909216825260208201849052805133927f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb92908290030190a25050565b60085481565b610b5e6123e6565b6001600160a01b0316610b6f611363565b6001600160a01b031614610bca576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610bde6001600160a01b038316338361221c565b604080516001600160a01b03841681526020810183905281517f1f29bc8239df330207e019f41493b485f9c7d3ce83a795ae64603dde527ada2e929181900390910190a15050565b6003546001600160a01b031681565b600a5481565b610c436123e6565b6001600160a01b0316610c54611363565b6001600160a01b031614610caf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610d196123e6565b6001600160a01b0316610d2a611363565b6001600160a01b031614610d85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615610ddd576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b61014d811115610e34576040805162461bcd60e51b815260206004820152601260248201527f746f6f206d616e79206164647265737365730000000000000000000000000000604482015290519081900360640190fd5b60005b81811015610e8a576001600f6000858585818110610e5157fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610e37565b505050565b600c546301000000900460ff1681565b610ea76123e6565b6001600160a01b0316610eb8611363565b6001600160a01b031614610f13576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615610f6b576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152600f60205260409020805460ff19169055565b610f946123e6565b6001600160a01b0316610fa5611363565b6001600160a01b031614611000576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611058576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b806110aa576040805162461bcd60e51b815260206004820152601a60248201527f63616e6e6f7420736574207a65726f2077686974656c69737473000000000000604482015290519081900360640190fd5b6001600160a01b039091166000908152601060209081526040808320805460ff19166001179055600e909152902055565b6110e36123e6565b6001600160a01b03166110f4611363565b6001600160a01b03161461114f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c54610100900460ff166111ab576040805162461bcd60e51b815260206004820152601260248201527f53616c6520686173206e6f7420656e6465640000000000000000000000000000604482015290519081900360640190fd5b600c5462010000900460ff1615611209576040805162461bcd60e51b815260206004820152601f60248201527f436c61696d2068617320616c7265616479206265656e20756e6c6f636b656400604482015290519081900360640190fd5b600b5460048054604080517f70a082310000000000000000000000000000000000000000000000000000000081523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561127157600080fd5b505afa158015611285573d6000803e3d6000fd5b505050506040513d602081101561129b57600080fd5b505110156112f0576040805162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f75676820524f4d4520696e20636f6e74726163740000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff16620100001790556040805143815290517fd82fec69986a6bab8d7dde08040401c0345e390a2191c089336066db65b8c36a9181900360200190a1565b600c54640100000000900460ff1681565b6000546001600160a01b031690565b6005546001600160a01b031681565b60106020526000908152604090205460ff1681565b6004546001600160a01b031681565b60075481565b6113b36123e6565b6001600160a01b03166113c4611363565b6001600160a01b03161461141f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5462010000900460ff1661147c576040805162461bcd60e51b815260206004820152601b60248201527f436c61696d20686173206e6f74206265656e20756e6c6f636b65640000000000604482015290519081900360640190fd5b600c546301000000900460ff16156114c55760405162461bcd60e51b815260040180806020018281038252602581526020018061286b6025913960400191505060405180910390fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff1663010000001790556040805143815290517f70b3a8c1366544927f55edfba677c796d54a050cc77801d11f3c7501756a7cdf9181900360200190a1565b600c5462010000900460ff1681565b6002546001600160a01b031681565b600c54640100000000900460ff16156115a6576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5460ff166115fd576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff161561165a576040805162461bcd60e51b815260206004820152600e60248201527f53616c652068617320656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b336000908152600f602052604090205460ff1615156001146116ad5760405162461bcd60e51b81526004018080602001828103825260228152602001806128496022913960400191505060405180910390fd5b336000908152600d6020526040902080546116c890836122fe565b600854101561171e576040805162461bcd60e51b815260206004820152601b60248201527f6e657720616d6f756e742061626f76652075736572206c696d69740000000000604482015290519081900360640190fd5b805461172a90836122fe565b815560095461173990836122fe565b60095560075460009061176690633b9aca0090611760908187670de0b6b3a76400006123ea565b90612443565b600b5490915061177690826122fe565b600b55600554600154611798916001600160a01b039182169133911686612358565b600354604080517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810184905290516001600160a01b03909216916340c10f199160448082019260009290919082900301818387803b15801561180457600080fd5b505af1158015611818573d6000803e3d6000fd5b50506040805186815290513393507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c92509081900360200190a2505050565b60116020526000908152604090205481565b600c54640100000000900460ff16156118c9576040805162461bcd60e51b815260206004820152601260248201527f636f6e7472616374206973207061757365640000000000000000000000000000604482015290519081900360640190fd5b600c5460ff16611920576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff161561197d576040805162461bcd60e51b815260206004820152600e60248201527f53616c652068617320656e646564000000000000000000000000000000000000604482015290519081900360640190fd5b3360009081526010602052604090205460ff1615156001146119d05760405162461bcd60e51b81526004018080602001828103825260228152602001806128066022913960400191505060405180910390fd5b336000908152600e6020526040902060018101546119ee90836122fe565b81546008546119fc916123ea565b1015611a4f576040805162461bcd60e51b815260206004820152601b60248201527f6e657720616d6f756e742061626f7665207465616d206c696d69740000000000604482015290519081900360640190fd5b6001810154611a5e90836122fe565b6001820155600a54611a7090836122fe565b600a55600754600090611a9790633b9aca0090611760908187670de0b6b3a76400006123ea565b600b54909150611aa790826122fe565b600b55600554600254611ac9916001600160a01b039182169133911686612358565b600354600654604080517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052905191909216916340c10f1991604480830192600092919082900301818387803b15801561180457600080fd5b611b426123e6565b6001600160a01b0316611b53611363565b6001600160a01b031614611bae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611c06576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b600c805460ff191660011790556040805143815290517fa78c547613f6306e7a70d1bd161c18a496cae1eeb8d4f9e58b60d69ad72ddf589181900360200190a1565b6000611c526123e6565b6001600160a01b0316611c63611363565b6001600160a01b031614611cbe576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b50600c805460ff64010000000080830482161581027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff909316929092179283905591041690565b600e6020526000908152604090208054600182015460028301546003909301549192909160ff1684565b600f6020526000908152604090205460ff1681565b6001546001600160a01b031681565b611d5b6123e6565b6001600160a01b0316611d6c611363565b6001600160a01b031614611dc7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff1615611e1f576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152601060209081526040808320805460ff19908116909155600e9092528220828155600181018390556002810192909255600390910180549091169055565b60095481565b611e796123e6565b6001600160a01b0316611e8a611363565b6001600160a01b031614611ee5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff16611f3c576040805162461bcd60e51b815260206004820152601460248201527f53616c6520686173206e6f742073746172746564000000000000000000000000604482015290519081900360640190fd5b600c54610100900460ff1615611f99576040805162461bcd60e51b815260206004820152601660248201527f53616c652068617320616c726561647920656e64656400000000000000000000604482015290519081900360640190fd5b600c80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040805143815290517f94bb74a9473ae4063ec1e73dc3e35fd4b5abe9cc1e43ad0db84e5358559ccd5a9181900360200190a1565b6120026123e6565b6001600160a01b0316612013611363565b6001600160a01b03161461206e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166120b35760405162461bcd60e51b81526004018080602001828103825260268152602001806127ba6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b61212e6123e6565b6001600160a01b031661213f611363565b6001600160a01b03161461219a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600c5460ff16156121f2576040805162461bcd60e51b815260206004820152601860248201527f53616c652068617320616c726561647920737461727465640000000000000000604482015290519081900360640190fd5b6001600160a01b03166000908152600f60205260409020805460ff19166001179055565b600b5481565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e8a9084906124aa565b6000828211156122f3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082820183811015610948576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526123e09085906124aa565b50505050565b3390565b6000826123f9575060006122f8565b8282028284828161240657fe5b04146109485760405162461bcd60e51b81526004018080602001828103825260218152602001806128286021913960400191505060405180910390fd5b6000808211612499576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816124a257fe5b049392505050565b60606124ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661255b9092919063ffffffff16565b805190915015610e8a5780806020019051602081101561251e57600080fd5b5051610e8a5760405162461bcd60e51b815260040180806020018281038252602a815260200180612890602a913960400191505060405180910390fd5b606061256a8484600085612572565b949350505050565b6060824710156125b35760405162461bcd60e51b81526004018080602001828103825260268152602001806127e06026913960400191505060405180910390fd5b6125bc856126ec565b61260d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061266a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161262d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146126cc576040519150601f19603f3d011682016040523d82523d6000602084013e6126d1565b606091505b50915091506126e18282866126f2565b979650505050505050565b3b151590565b60608315612701575081610948565b8251156127115782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561275b578181015183820152602001612743565b50505050905090810190601f1680156127885780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60405180606001604052806000815260200160008152602001600015158152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c6d73672e73656e646572206973206e6f742077686974656c6973746564207465616d536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f776d73672e73656e646572206973206e6f742077686974656c69737465642075736572436c61696d20416c7068612068617320616c7265616479206265656e20756e6c6f636b65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645f616d6f756e74206d7573742062652067726561746572207468616e207a65726fa264697066735822122049bc04184fd398df97dfd55b32e845909b7bbe5bff967ef01f2c8aee3834476264736f6c63430007050033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMultipleWhitelist(address[])": {
        "params": {
          "_addresses": ": dynamic array of addresses to whitelist"
        }
      },
      "addTeam(address,uint256)": {
        "params": {
          "_address": ": address to whitelist",
          "_numWhitelist": ": number of whitelists for address"
        }
      },
      "addWhitelist(address)": {
        "params": {
          "_address": ": address to whitelist"
        }
      },
      "adminWithdraw(address,uint256)": {
        "params": {
          "_amount": ": amount of token to withdraw",
          "_token": ": token address to withdraw"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": ": amount of DAI to deposit to sale (18 decimals)"
        }
      },
      "depositTeam(uint256)": {
        "details": "only for team members",
        "params": {
          "_amount": ": amount of FRAX to deposit to sale (18 decimals)"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeTeam(address)": {
        "params": {
          "_address": ": address to remove from whitelist"
        }
      },
      "removeWhitelist(address)": {
        "params": {
          "_address": ": address to remove from whitelist"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "_amount": ": amount of aROME to deposit to sale (9 decimals)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMultipleWhitelist(address[])": {
        "notice": "adds multiple whitelist to the sale"
      },
      "addTeam(address,uint256)": {
        "notice": "adds a team member from sale"
      },
      "addWhitelist(address)": {
        "notice": "adds a single whitelist to the sale"
      },
      "adminWithdraw(address,uint256)": {
        "notice": "transfer ERC20 token to DAO multisig"
      },
      "deposit(uint256)": {
        "notice": "it deposits DAI for the sale"
      },
      "depositTeam(uint256)": {
        "notice": "it deposits FRAX for the sale"
      },
      "removeTeam(address)": {
        "notice": "removes a team member from sale"
      },
      "removeWhitelist(address)": {
        "notice": "removes a single whitelist from the sale"
      },
      "withdraw(uint256)": {
        "notice": "it deposits aROME to withdraw ROME from the sale"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2081,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "DAI",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 2083,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "FRAX",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 2085,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "aROME",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 2087,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "ROME",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)542"
      },
      {
        "astId": 2089,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "DAO",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2091,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "WARCHEST",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 2096,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "price",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2101,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "cap",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2103,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "totalRaisedDAI",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2105,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "totalRaisedFRAX",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2107,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "totalDebt",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2109,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "started",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2111,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "ended",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2113,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "claimable",
        "offset": 2,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2115,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "claimAlpha",
        "offset": 3,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2117,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "contractPaused",
        "offset": 4,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 2121,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "userInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UserInfo)2070_storage)"
      },
      {
        "astId": 2125,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "teamInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_struct(TeamInfo)2079_storage)"
      },
      {
        "astId": 2129,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "whitelisted",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2133,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "whitelistedTeam",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2137,
        "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
        "label": "romeClaimable",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)542": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(TeamInfo)2079_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DaiRomePresale.TeamInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TeamInfo)2079_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)2070_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DaiRomePresale.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2070_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TeamInfo)2079_storage": {
        "encoding": "inplace",
        "label": "struct DaiRomePresale.TeamInfo",
        "members": [
          {
            "astId": 2072,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "numWhitelist",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2074,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2076,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2078,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "claimed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(UserInfo)2070_storage": {
        "encoding": "inplace",
        "label": "struct DaiRomePresale.UserInfo",
        "members": [
          {
            "astId": 2065,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2067,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "debt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2069,
            "contract": "src/presale/DaiPresale.sol:DaiRomePresale",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}